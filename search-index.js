crystal_doc_search_index_callback({"repository_name":"upload_io","body":"# UploadIO\n\n[![Crystal CI](https://github.com/mamantoha/upload_io/actions/workflows/crystal.yml/badge.svg)](https://github.com/mamantoha/upload_io/actions/workflows/crystal.yml)\n[![GitHub release](https://img.shields.io/github/release/mamantoha/upload_io.svg)](https://github.com/mamantoha/upload_io/releases)\n[![License](https://img.shields.io/github/license/mamantoha/upload_io.svg)](https://github.com/mamantoha/upload_io/blob/master/LICENSE)\n\n`UploadIO` is a streaming upload library written in Crystal that integrates with `HTTP::Client`.\n\n`UploadIO` instances can be used directly as the request body in `HTTP::Client` requests.\nSince it implements the `IO` interface, `HTTP::Client` can read from it just like any other `IO` object.\n\nFeatures:\n\n- Streaming uploads with configurable chunk size\n- Progress tracking through callback functions\n- Upload cancellation support via callback or direct method call\n- Pause/Resume functionality for upload control\n- Speed limiting with configurable bandwidth (in bytes per second)\n- Seamless integration with Crystal's `HTTP::Client`\n- Support for various input types (`IO`, `Byte`, `String`)\n- Real-time upload progress monitoring\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     upload_io:\n       github: mamantoha/upload_io\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nThis example demonstrates how to upload a file using `UploadIO` and `HTTP::Client` with chunked streaming and real-time progress tracking. The upload progress is displayed in bytes and percentage as the file is sent.\n\n```crystal\nrequire \"upload_io\"\nrequire \"http/client\"\n\nfile = File.open(\"/path/to/file\")\nsize = file.size\nuploaded_total = 0\nstart_time = Time.monotonic\n\nupload_io = UploadIO.new(file, 4096)\n\n# Progress tracking callback\nupload_io.on_progress ->(uploaded_chunk : Int32) do\n  uploaded_total += uploaded_chunk\n  elapsed_time = (Time.monotonic - start_time).total_seconds\n  percentage = (uploaded_total * 100.0 / size).round(2)\n  puts \"Uploaded: #{uploaded_total} / #{size} bytes (#{percentage}%) in #{elapsed_time.round(2)}s\"\nend\n\n# Using should_cancel callback to stop upload after 5 seconds\nupload_io.should_cancel ->{ (Time.monotonic - start_time).total_seconds > 5 }\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", body: upload_io)\n\ntotal_time = (Time.monotonic - start_time).total_seconds\nputs \"Upload complete! Response: #{response.status_code} in #{total_time.round(2)} seconds\"\n```\n\nExample output:\n\n```\nUploaded: 4096 / 1048576 bytes (0.39%) in 0.01s\nUploaded: 8192 / 1048576 bytes (0.78%) in 0.02s\n...\nUploaded: 1040384 / 1048576 bytes (99.22%) in 2.45s\nUploaded: 1044480 / 1048576 bytes (99.61%) in 2.48s\nUploaded: 1048576 / 1048576 bytes (100.0%) in 2.50s\nUpload complete! Response: 200 in 2.50 seconds\n```\n\n### Speed Limiting\n\n`UploadIO` supports bandwidth limiting to control upload speed. The speed limit is specified in bytes per second. Here's how to use it:\n\n```crystal\nrequire \"upload_io\"\nrequire \"http/client\"\n\nfile = File.open(\"/path/to/file\")\nsize = file.size\nuploaded_total = 0\nstart_time = Time.monotonic\n\n# Progress tracking callback with speed display\nprogress_tracker = ->(uploaded_chunk : Int32) do\n  uploaded_total += uploaded_chunk\n  timestamp = Time.local\n  current_time = Time.monotonic\n\n  # Calculate average speed\n  total_time = (current_time - start_time).total_seconds\n  average_speed = total_time > 0 ? (uploaded_total / total_time).to_i64 : 0_i64\n\n  # Convert to MB/s and Mbps\n  speed_mb = average_speed / 1_048_576.0\n  speed_mbps = (average_speed * 8) / 1_000_000.0\n\n  puts \"[#{timestamp}] Uploaded: #{uploaded_total} / #{size} bytes (#{(uploaded_total * 100.0 / size).round(2)}%)\"\n  puts \"  Speed: #{speed_mb.round(2)} MB/s (#{speed_mbps.round(2)} Mbps)\"\nend\n\n# Speed limit examples:\n# 1 Mbps = 125_000 bytes/s\n# 10 Mbps = 1_250_000 bytes/s\n# 100 Mbps = 12_500_000 bytes/s\nmax_speed = 125_000 # 1 Mbps\n\nupload_io = UploadIO.new(\n  file,\n  4096,\n  progress_tracker,\n  max_speed: max_speed\n)\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", body: upload_io)\n```\n\nExample output with speed limiting:\n\n```\n[2025-05-07 10:30:15] Uploaded: 1048576 / 10485760 bytes (10.00%)\n  Speed: 0.12 MB/s (1.00 Mbps)\n[2025-05-07 10:30:16] Uploaded: 2097152 / 10485760 bytes (20.00%)\n  Speed: 0.12 MB/s (1.00 Mbps)\n...\n```\n\n### Upload cancellation\n\nThe library provides two ways to cancel an upload:\n\n1. Using `should_cancel` callback:\n   - Called before each chunk is read\n   - Return `true` to cancel the upload\n   - Useful for time-based or condition-based cancellation\n\n2. Using `cancel` method:\n   - Immediately stops the upload\n   - Closes the underlying IO if it's an IO source\n   - Useful for external cancellation (e.g., from another fiber)\n\n### crest\n\n`UploadIO` instances can be used directly as the request form data in [crest](https://github.com/mamantoha/crest) requests.\n\n```crystal\nrequire \"upload_io\"\nrequire \"crest\"\n\nfile = File.open(\"/path/to/file\")\n\nupload_io = UploadIO.new(file)\nresponse = Crest.post(\"http://example.com/upload\", form: upload_io)\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/mamantoha/upload_io/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Anton Maminov](https://github.com/mamantoha) - creator and maintainer\n","program":{"html_id":"upload_io/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"upload_io","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"upload_io/UploadIO","path":"UploadIO.html","kind":"class","full_name":"UploadIO","name":"UploadIO","abstract":false,"superclass":{"html_id":"upload_io/IO","kind":"class","full_name":"IO","name":"IO"},"ancestors":[{"html_id":"upload_io/IO","kind":"class","full_name":"IO","name":"IO"},{"html_id":"upload_io/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"upload_io/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/upload_io.cr","line_number":30,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L30"}],"repository_name":"upload_io","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CHUNK_SIZE","name":"CHUNK_SIZE","value":"4096"},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /home/runner/work/upload_io/upload_io/src`).chomp.stringify }}"}],"doc":"`UploadIO` supports chunked uploads with a built-in progress callback\nand provides upload cancellation through either a callback or direct method call.\n\n```\nrequire \"upload_io\"\nrequire \"http/client\"\n\nfile = File.open(\"/path/to/file\")\nsize = file.size\nuploaded_total = 0\n\nupload_io = UploadIO.new(file, 4096, ->(uploaded_chunk : Int32) {\n  uploaded_total += uploaded_chunk\n  puts \"Uploaded: #{uploaded_total} / #{size} bytes\"\n})\n\nheaders = HTTP::Headers{\n  \"Content-Type\"   => \"application/octet-stream\",\n  \"Content-Length\" => size.to_s,\n}\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", headers: headers, body: upload_io)\nputs \"Upload complete! Response: #{response.status_code}\"\n```","summary":"<p><code><a href=\"UploadIO.html\">UploadIO</a></code> supports chunked uploads with a built-in progress callback and provides upload cancellation through either a callback or direct method call.</p>","constructors":[{"html_id":"new(data:HTTP::Client::BodyType,chunk_size:Int32,on_progress:Proc(Int32,Nil)|Nil=nil,should_cancel:Proc(Bool)|Nil=nil,*,max_speed:Int64|Nil=nil)-class-method","name":"new","doc":"Creates a new `UploadIO` with given arguments.\n\n- `data` - the upload data source\n- `chunk_size` - the size of each chunk to be read\n- `on_progress` - optional callback to track progress\n- `should_cancel` - optional callback to control upload cancellation\n- `max_speed` - optional maximum upload speed in bytes per second","summary":"<p>Creates a new <code><a href=\"UploadIO.html\">UploadIO</a></code> with given arguments.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"},{"name":"on_progress","default_value":"nil","external_name":"on_progress","restriction":"Proc(Int32, Nil) | ::Nil"},{"name":"should_cancel","default_value":"nil","external_name":"should_cancel","restriction":"Proc(Bool) | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"max_speed","default_value":"nil","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"args_string":"(data : HTTP::Client::BodyType, chunk_size : Int32, on_progress : Proc(Int32, Nil) | Nil = nil, should_cancel : Proc(Bool) | Nil = nil, *, max_speed : Int64 | Nil = nil)","args_html":"(data : HTTP::Client::BodyType, chunk_size : Int32, on_progress : Proc(Int32, Nil) | Nil = <span class=\"n\">nil</span>, should_cancel : Proc(Bool) | Nil = <span class=\"n\">nil</span>, *, max_speed : Int64 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/upload_io.cr","line_number":54,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L54"},"def":{"name":"new","args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"},{"name":"on_progress","default_value":"nil","external_name":"on_progress","restriction":"Proc(Int32, Nil) | ::Nil"},{"name":"should_cancel","default_value":"nil","external_name":"should_cancel","restriction":"Proc(Bool) | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"max_speed","default_value":"nil","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"splat_index":4,"visibility":"Public","body":"_ = allocate\n_.initialize(data, chunk_size, on_progress, should_cancel, max_speed: max_speed)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"new(data:HTTP::Client::BodyType,chunk_size:Int32=CHUNK_SIZE,&block:self->)-class-method","name":"new","doc":"Creates a new `UploadIO` with a block for configuration.\n\n```\nfile = File.open(\"/path/to/file\")\nsize = file.size\nuploaded_total = 0\n\nupload_io = UploadIO.new(file) do |io|\n  io.on_progress ->(uploaded_chunk : Int32) do\n    uploaded_total += uploaded_chunk\n    puts \"Uploaded: #{uploaded_total} / #{size} bytes\"\n  end\n\n  io.should_cancel -> { uploaded_total >= size / 2 }\n  io.max_speed = 125_000 # 1 Mbps\nend\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", body: upload_io)\n```","summary":"<p>Creates a new <code><a href=\"UploadIO.html\">UploadIO</a></code> with a block for configuration.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"chunk_size","default_value":"CHUNK_SIZE","external_name":"chunk_size","restriction":"Int32"}],"args_string":"(data : HTTP::Client::BodyType, chunk_size : Int32 = CHUNK_SIZE, &block : self -> )","args_html":"(data : HTTP::Client::BodyType, chunk_size : Int32 = <span class=\"t\">CHUNK_SIZE</span>, &block : <span class=\"k\">self</span> -> )","location":{"filename":"src/upload_io.cr","line_number":106,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L106"},"def":{"name":"new","args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"chunk_size","default_value":"CHUNK_SIZE","external_name":"chunk_size","restriction":"Int32"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(self ->)"},"visibility":"Public","body":"io = new(data, chunk_size)\nblock.call(io)\nio\n"},"external_var":false},{"html_id":"new(data:HTTP::Client::BodyType,on_progress:Proc(Int32,Nil)|Nil=nil,should_cancel:Proc(Bool)|Nil=nil,*,max_speed:Int64|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"on_progress","default_value":"nil","external_name":"on_progress","restriction":"Proc(Int32, Nil) | ::Nil"},{"name":"should_cancel","default_value":"nil","external_name":"should_cancel","restriction":"Proc(Bool) | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"max_speed","default_value":"nil","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"args_string":"(data : HTTP::Client::BodyType, on_progress : Proc(Int32, Nil) | Nil = nil, should_cancel : Proc(Bool) | Nil = nil, *, max_speed : Int64 | Nil = nil)","args_html":"(data : HTTP::Client::BodyType, on_progress : Proc(Int32, Nil) | Nil = <span class=\"n\">nil</span>, should_cancel : Proc(Bool) | Nil = <span class=\"n\">nil</span>, *, max_speed : Int64 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/upload_io.cr","line_number":112,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L112"},"def":{"name":"new","args":[{"name":"data","external_name":"data","restriction":"HTTP::Client::BodyType"},{"name":"on_progress","default_value":"nil","external_name":"on_progress","restriction":"Proc(Int32, Nil) | ::Nil"},{"name":"should_cancel","default_value":"nil","external_name":"should_cancel","restriction":"Proc(Bool) | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"max_speed","default_value":"nil","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"splat_index":3,"visibility":"Public","body":"new(data, CHUNK_SIZE, on_progress, should_cancel, max_speed: max_speed)"},"external_var":false}],"instance_methods":[{"html_id":"cancel-instance-method","name":"cancel","doc":"Cancels the upload process. After calling this method:\n- Subsequent reads will return 0 bytes\n- If the data source is an IO, it will be closed\n- The upload cannot be resumed","summary":"<p>Cancels the upload process.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":160,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L160"},"def":{"name":"cancel","visibility":"Public","body":"if cancelled?\n  return\nend\n\n@cancelled = true\n\nif @is_io && @data.is_a?(IO)\n  (@data.as(IO)).close\nend\n"},"external_var":false},{"html_id":"cancelled?:Bool-instance-method","name":"cancelled?","doc":"Returns true if the upload has been cancelled","summary":"<p>Returns true if the upload has been cancelled</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":39,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L39"},"def":{"name":"cancelled?","return_type":"Bool","visibility":"Public","body":"@cancelled"},"external_var":false},{"html_id":"max_speed:Int64|Nil-instance-method","name":"max_speed","doc":"Maximum upload speed in bytes per second. If nil, no speed limit is applied.","summary":"<p>Maximum upload speed in bytes per second.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":45,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L45"},"def":{"name":"max_speed","return_type":"Int64 | ::Nil","visibility":"Public","body":"@max_speed"},"external_var":false},{"html_id":"max_speed=(max_speed:Int64|Nil)-instance-method","name":"max_speed=","doc":"Maximum upload speed in bytes per second. If nil, no speed limit is applied.","summary":"<p>Maximum upload speed in bytes per second.</p>","abstract":false,"args":[{"name":"max_speed","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"args_string":"(max_speed : Int64 | Nil)","args_html":"(max_speed : Int64 | Nil)","location":{"filename":"src/upload_io.cr","line_number":45,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L45"},"def":{"name":"max_speed=","args":[{"name":"max_speed","external_name":"max_speed","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"@max_speed = max_speed"},"external_var":false},{"html_id":"on_progress(on_progress:Proc(Int32,Nil))-instance-method","name":"on_progress","doc":"Optional callback function that receives the size of each uploaded chunk.\n\n```\nfile = File.open(\"/path/to/file\")\nsize = file.size\nuploaded_total = 0\n\nupload_io = UploadIO.new(file)\nupload_io.on_progress ->(uploaded_chunk : Int32) do\n  uploaded_total += uploaded_chunk\n  puts \"Uploaded: #{uploaded_total} / #{size} bytes\"\nend\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", body: upload_io)\n```","summary":"<p>Optional callback function that receives the size of each uploaded chunk.</p>","abstract":false,"args":[{"name":"on_progress","external_name":"on_progress","restriction":"Proc(Int32, Nil)"}],"args_string":"(on_progress : Proc(Int32, Nil))","args_html":"(on_progress : Proc(Int32, Nil))","location":{"filename":"src/upload_io.cr","line_number":137,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L137"},"def":{"name":"on_progress","args":[{"name":"on_progress","external_name":"on_progress","restriction":"Proc(Int32, Nil)"}],"visibility":"Public","body":"@on_progress = on_progress"},"external_var":false},{"html_id":"pause-instance-method","name":"pause","doc":"Pauses the upload process. While paused:\n- Subsequent reads will block until `resume` is called\n- The upload can be resumed using the `resume` method","summary":"<p>Pauses the upload process.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":173,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L173"},"def":{"name":"pause","visibility":"Public","body":"@paused = true"},"external_var":false},{"html_id":"paused?:Bool-instance-method","name":"paused?","doc":"Returns true if the upload is currently paused","summary":"<p>Returns true if the upload is currently paused</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":42,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L42"},"def":{"name":"paused?","return_type":"Bool","visibility":"Public","body":"@paused"},"external_var":false},{"html_id":"read(slice:Bytes):Int32-instance-method","name":"read","doc":"Reads the next chunk of data and copies it into the provided buffer.\n\nThis method is called automatically by `HTTP::Client` when sending data.\nIt reads up to `chunk_size` bytes and updates the upload progress.\n\nReturns the number of bytes that will be sent to the server (not the total send bytes),\nwhich is 0 if and only if there is no more data to reads\n(so checking for 0 is the way to detect end of file).\n\nSince `UploadIO` only provides data to `HTTP::Client`,\nwe can only track the amount of data read and not the actual bytes transmitted to the server.","summary":"<p>Reads the next chunk of data and copies it into the provided buffer.</p>","abstract":false,"args":[{"name":"slice","external_name":"slice","restriction":"Bytes"}],"args_string":"(slice : Bytes) : Int32","args_html":"(slice : Bytes) : Int32","location":{"filename":"src/upload_io.cr","line_number":218,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L218"},"def":{"name":"read","args":[{"name":"slice","external_name":"slice","restriction":"Bytes"}],"return_type":"Int32","visibility":"Public","body":"if @rewound || cancelled?\n  return 0\nend\nif @should_cancel.try(&.call)\n  return 0\nend\nif @data\nelse\n  return 0\nend\n\nwhile paused?\n  sleep(0.1.seconds)\nend\n\nif @is_io\n  bytes_to_send = (@data.as(IO)).read(slice)\nelse\n  remaining = @size - @offset\n\n  if remaining <= 0\n    return 0\n  end\n\n  bytes_to_send = [@chunk_size, remaining].min\n  chunk = (@data.as(Bytes))[@offset, bytes_to_send]\n\n  slice.copy_from(chunk)\n  @offset = @offset + bytes_to_send\nend\n\n@uploaded = @uploaded + bytes_to_send\n\n@on_progress.try(&.call(bytes_to_send))\n\n\nsleep(calculate_wait_time(bytes_to_send))\n\nbytes_to_send\n"},"external_var":false},{"html_id":"resume-instance-method","name":"resume","doc":"Resumes a paused upload. After calling this method:\n- Subsequent reads will continue from where they left off","summary":"<p>Resumes a paused upload.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":179,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L179"},"def":{"name":"resume","visibility":"Public","body":"@paused = false"},"external_var":false},{"html_id":"rewind-instance-method","name":"rewind","doc":"Rewinds this `IO`. By default this method raises, but including types\nmay implement it.","summary":"<p>Rewinds this <code>IO</code>.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":259,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L259"},"def":{"name":"rewind","visibility":"Public","body":"@offset = 0\n@uploaded = 0\n@rewound = true\n@last_read_time = Time.monotonic\n@bytes_in_window = 0\n@window_start = Time.monotonic\n"},"external_var":false},{"html_id":"should_cancel(should_cancel:Proc(Bool))-instance-method","name":"should_cancel","doc":"Optional callback function that determines if the upload should be cancelled.\nReturn true to cancel the upload.\n\n```\nfile = File.open(\"/path/to/file\")\nstart_time = Time.monotonic\n\nupload_io = UploadIO.new(file)\n# Stop upload after 5 seconds\nupload_io.should_cancel -> { (Time.monotonic - start_time).total_seconds > 5 }\n\nresponse = HTTP::Client.post(\"http://example.com/upload\", body: upload_io)\n```","summary":"<p>Optional callback function that determines if the upload should be cancelled.</p>","abstract":false,"args":[{"name":"should_cancel","external_name":"should_cancel","restriction":"Proc(Bool)"}],"args_string":"(should_cancel : Proc(Bool))","args_html":"(should_cancel : Proc(Bool))","location":{"filename":"src/upload_io.cr","line_number":153,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L153"},"def":{"name":"should_cancel","args":[{"name":"should_cancel","external_name":"should_cancel","restriction":"Proc(Bool)"}],"visibility":"Public","body":"@should_cancel = should_cancel"},"external_var":false},{"html_id":"uploaded:Int64-instance-method","name":"uploaded","doc":"Tracks the total bytes uploaded so far.","summary":"<p>Tracks the total bytes uploaded so far.</p>","abstract":false,"location":{"filename":"src/upload_io.cr","line_number":36,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L36"},"def":{"name":"uploaded","return_type":"Int64","visibility":"Public","body":"@uploaded"},"external_var":false},{"html_id":"write(slice:Bytes):Nil-instance-method","name":"write","doc":"Required method by `IO` but not used in `UploadIO`.\n\n`UploadIO` is read-only, so `write` does nothing.","summary":"<p>Required method by <code>IO</code> but not used in <code><a href=\"UploadIO.html\">UploadIO</a></code>.</p>","abstract":false,"args":[{"name":"slice","external_name":"slice","restriction":"Bytes"}],"args_string":"(slice : Bytes) : Nil","args_html":"(slice : Bytes) : Nil","location":{"filename":"src/upload_io.cr","line_number":255,"url":"https://github.com/mamantoha/upload_io/blob/97f9f468cd07812914a1e6a8c9f1adb98bc41963/src/upload_io.cr#L255"},"def":{"name":"write","args":[{"name":"slice","external_name":"slice","restriction":"Bytes"}],"return_type":"Nil","visibility":"Public","body":"nil"},"external_var":false}]}]}})